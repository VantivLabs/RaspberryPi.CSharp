//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.VisualStudio.ServiceReference.Platforms, version 14.0.23107.0
// 
namespace RaspberryPi.CSharp.MPSWebService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://www.mercurypay.com", ConfigurationName="MPSWebService.wsSoap")]
    public interface wsSoap {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.mercurypay.com/CBatch", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<RaspberryPi.CSharp.MPSWebService.ArrayOfXElement> CBatchAsync(string merchant);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.mercurypay.com/AllowRunAsDebit", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<bool> AllowRunAsDebitAsync(string merchant, string pw, string account);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.mercurypay.com/CTranDetail", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> CTranDetailAsync(string merchant, string pw, string invoice);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.mercurypay.com/CAllDetail", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> CAllDetailAsync(string merchant, string pw, string invoice, string startdate, string enddate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.mercurypay.com/CAllDetailEx", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> CAllDetailExAsync(string merchant, string pw, string invoice, string startdate, string enddate, string transactioncode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.mercurypay.com/CAllGiftDetail", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> CAllGiftDetailAsync(string merchant, string pw, string invoice, string startdate, string enddate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.mercurypay.com/CreditTransaction", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> CreditTransactionAsync(string tran, string pw);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.mercurypay.com/GiftTransaction", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> GiftTransactionAsync(string tran, string pw);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.mercurypay.com/LoyaltyTransaction", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> LoyaltyTransactionAsync(string tran, string pw);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.mercurypay.com/ACHTransaction", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> ACHTransactionAsync(string tran, string pw);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.mercurypay.com/ACHStatus", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> ACHStatusAsync(string merchant, string pw, string invoice, string startdate, string enddate, string fundingStatus);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.mercurypay.com/AssociateAccount", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<bool> AssociateAccountAsync(string account, string identifier, string merchantid, string memo, string pw);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.mercurypay.com/RemoveAccountAssociation", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<bool> RemoveAccountAssociationAsync(string account, string identifier, string merchantid, string pw);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.mercurypay.com/Lookup", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<string> LookupAsync(string tran, string pw);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface wsSoapChannel : RaspberryPi.CSharp.MPSWebService.wsSoap, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class wsSoapClient : System.ServiceModel.ClientBase<RaspberryPi.CSharp.MPSWebService.wsSoap>, RaspberryPi.CSharp.MPSWebService.wsSoap {
        
        /// <summary>
        /// Implement this partial method to configure the service endpoint.
        /// </summary>
        /// <param name="serviceEndpoint">The endpoint to configure</param>
        /// <param name="clientCredentials">The client credentials</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public wsSoapClient() : 
                base(wsSoapClient.GetDefaultBinding(), wsSoapClient.GetDefaultEndpointAddress()) {
            this.Endpoint.Name = EndpointConfiguration.wsSoap.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public wsSoapClient(EndpointConfiguration endpointConfiguration) : 
                base(wsSoapClient.GetBindingForEndpoint(endpointConfiguration), wsSoapClient.GetEndpointAddress(endpointConfiguration)) {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public wsSoapClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(wsSoapClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress)) {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public wsSoapClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(wsSoapClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress) {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public wsSoapClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Threading.Tasks.Task<RaspberryPi.CSharp.MPSWebService.ArrayOfXElement> CBatchAsync(string merchant) {
            return base.Channel.CBatchAsync(merchant);
        }
        
        public System.Threading.Tasks.Task<bool> AllowRunAsDebitAsync(string merchant, string pw, string account) {
            return base.Channel.AllowRunAsDebitAsync(merchant, pw, account);
        }
        
        public System.Threading.Tasks.Task<string> CTranDetailAsync(string merchant, string pw, string invoice) {
            return base.Channel.CTranDetailAsync(merchant, pw, invoice);
        }
        
        public System.Threading.Tasks.Task<string> CAllDetailAsync(string merchant, string pw, string invoice, string startdate, string enddate) {
            return base.Channel.CAllDetailAsync(merchant, pw, invoice, startdate, enddate);
        }
        
        public System.Threading.Tasks.Task<string> CAllDetailExAsync(string merchant, string pw, string invoice, string startdate, string enddate, string transactioncode) {
            return base.Channel.CAllDetailExAsync(merchant, pw, invoice, startdate, enddate, transactioncode);
        }
        
        public System.Threading.Tasks.Task<string> CAllGiftDetailAsync(string merchant, string pw, string invoice, string startdate, string enddate) {
            return base.Channel.CAllGiftDetailAsync(merchant, pw, invoice, startdate, enddate);
        }
        
        public System.Threading.Tasks.Task<string> CreditTransactionAsync(string tran, string pw) {
            return base.Channel.CreditTransactionAsync(tran, pw);
        }
        
        public System.Threading.Tasks.Task<string> GiftTransactionAsync(string tran, string pw) {
            return base.Channel.GiftTransactionAsync(tran, pw);
        }
        
        public System.Threading.Tasks.Task<string> LoyaltyTransactionAsync(string tran, string pw) {
            return base.Channel.LoyaltyTransactionAsync(tran, pw);
        }
        
        public System.Threading.Tasks.Task<string> ACHTransactionAsync(string tran, string pw) {
            return base.Channel.ACHTransactionAsync(tran, pw);
        }
        
        public System.Threading.Tasks.Task<string> ACHStatusAsync(string merchant, string pw, string invoice, string startdate, string enddate, string fundingStatus) {
            return base.Channel.ACHStatusAsync(merchant, pw, invoice, startdate, enddate, fundingStatus);
        }
        
        public System.Threading.Tasks.Task<bool> AssociateAccountAsync(string account, string identifier, string merchantid, string memo, string pw) {
            return base.Channel.AssociateAccountAsync(account, identifier, merchantid, memo, pw);
        }
        
        public System.Threading.Tasks.Task<bool> RemoveAccountAssociationAsync(string account, string identifier, string merchantid, string pw) {
            return base.Channel.RemoveAccountAssociationAsync(account, identifier, merchantid, pw);
        }
        
        public System.Threading.Tasks.Task<string> LookupAsync(string tran, string pw) {
            return base.Channel.LookupAsync(tran, pw);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync() {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        public virtual System.Threading.Tasks.Task CloseAsync() {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration) {
            if ((endpointConfiguration == EndpointConfiguration.wsSoap)) {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                result.Security.Mode = System.ServiceModel.BasicHttpSecurityMode.Transport;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration) {
            if ((endpointConfiguration == EndpointConfiguration.wsSoap)) {
                return new System.ServiceModel.EndpointAddress("https://w1.mercurycert.net/ws/ws.asmx");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding() {
            return wsSoapClient.GetBindingForEndpoint(EndpointConfiguration.wsSoap);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress() {
            return wsSoapClient.GetEndpointAddress(EndpointConfiguration.wsSoap);
        }
        
        public enum EndpointConfiguration {
            
            wsSoap,
        }
    }
    
    [System.Xml.Serialization.XmlSchemaProviderAttribute(null, IsAny=true)]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.ServiceReference.Platforms", "14.0.0.0")]
    public partial class ArrayOfXElement : object, System.Xml.Serialization.IXmlSerializable {
        
        private System.Collections.Generic.List<System.Xml.Linq.XElement> nodesList = new System.Collections.Generic.List<System.Xml.Linq.XElement>();
        
        public ArrayOfXElement() {
        }
        
        public virtual System.Collections.Generic.List<System.Xml.Linq.XElement> Nodes {
            get {
                return this.nodesList;
            }
        }
        
        public virtual System.Xml.Schema.XmlSchema GetSchema() {
            throw new System.NotImplementedException();
        }
        
        public virtual void WriteXml(System.Xml.XmlWriter writer) {
            System.Collections.Generic.IEnumerator<System.Xml.Linq.XElement> e = nodesList.GetEnumerator();
            for (
            ; e.MoveNext(); 
            ) {
                ((System.Xml.Serialization.IXmlSerializable)(e.Current)).WriteXml(writer);
            }
        }
        
        public virtual void ReadXml(System.Xml.XmlReader reader) {
            for (
            ; (reader.NodeType != System.Xml.XmlNodeType.EndElement); 
            ) {
                if ((reader.NodeType == System.Xml.XmlNodeType.Element)) {
                    System.Xml.Linq.XElement elem = new System.Xml.Linq.XElement("default");
                    ((System.Xml.Serialization.IXmlSerializable)(elem)).ReadXml(reader);
                    Nodes.Add(elem);
                }
                else {
                    reader.Skip();
                }
            }
        }
    }
}
